!<arch>
0-isupper.c/    0           0     0     644     279       `
#include "main.h"
/**
 * _isupper - checks for if a character is in uppercase
 * character in the alphabet
 * Return: (1) for upper and (0) for lower
*/
int _isupper(int c)
{
int c_as_int = (int) c;
if ((c_as_int <= 90) && (c_as_int >= 65))
{
return (1);
}
else
{
return (0);
}
}
0-memset.c/     0           0     0     644     288       `
/**
 * _memset - a function that fills memory with a constant byte.
 * @s: pointer
 * @b : constant byte
 * @n: first bytes
 * Return: a pointer to the memory space
*/
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i = 0;
while (i < n)
{
*(s + i) = b;
i++;
}
return (s);
}
0-strcat.c/     0           0     0     644     354       `
/**
 * _strcat - concatenates two strings
 * @dest: pointer to the destination string
 * @src: pointer to the source string
 * Return: pointer to the resulting string dest
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	for (j = 0; dest[j] != '\0'; j++)
		;
	while (src[i] != '\0')
	{
		dest[j + i] = src[i];
		i++;
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     488       `
#include "main.h"
/**
 * _atoi - converts a string to an integer.
 * @s: the string to convert
 * Return: the converted string.
 */
int _atoi(char *s)
{
	short boolean;
	int i, minus, result;

	i = minus = result = boolean = 0;
	minus = -1;

	while (s[i] != '\0')
	{
		if (s[i] == '-')
			minus *= -1;

		if (s[i] >= '0' && s[i] <= '9')
		{
			result *= 10;
			result -= (s[i] - '0');
			boolean = 1;
		}
		else if (boolean == 1)
			break;
		i++;
	}
	result *= minus;
	return (result);
}
1-isdigit.c/    0           0     0     644     165       `
#include "main.h"

int _isdigit(int c){
   int as_int = (int) c;
   if(as_int <= 57 && as_int >= 48){
      return(1);
   }else{
    return(0);
   }

    return 0;
}
1-memcpy.c/     0           0     0     644     339       `
/**
 * _memcpy - copies memory area
 * @dest: pointer to destination memory area
 * @src: pointer to source memory area
 * @n: number of bytes to copy
 * Return: pointer to destination memory area
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{ 
unsigned int i = 0;
while (i < n)
{
*(dest + i) = src[i];
i++;
}
return (dest);
}

1-strncat.c/    0           0     0     644     400       `
/**
 * _strncat - concatenates two strings
 * @dest: pointer to the destination string
 * @src: pointer to the source string
 * @n: number of bytes to print
 * Return: pointer to the resulting string dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	for (j = 0; dest[j] != '\0'; j++);
	while (src[i] != '\0' && i < n)
	{
		dest[j + i] = src[i];
		i++;
	}
	return (dest);
}2-strchr.c/     0           0     0     644     329       `
/**
 * _strchr - locates a character in a string
 * @s: pointer to string
 * @c: character to locate
 * Return: pointer to first occurence of character c
 * or NULL if character is not found.
 */
char *_strchr(char *s, char c)
{
int i = 0;
while(*(s+i) != '\0'){
if(*(s+i) == c )
{
return (s+i);
break;
}
i++;
}
return ('\0');
}

2-strlen.c/     0           0     0     644     228       `
/**
 * _strlen - gives the length of a string
 * @s: the characters
 * Return: the length of the string.
*/
int _strlen(char *s)
{
int i = 0;
int d;
do {
if (*s != '\0')
{
i++;
}
d = i;
} while (*(s + i) != '\0');
return (d);
}
2-strncpy.c/    0           0     0     644     401       `
/**
 * _strncpy - copies a string up to n
 * @dest: Destination of the pointer to the string
 * @src: Source of the pointer to the string to copy
 * @n: Number of bytes to copy.
 * Return: Pointer to the destination string.
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != '\0' && i < n; i++)
		dest[i]	= src[i];
	while (i < n)
		dest[i++] = '\0';
	return (dest);
}

3-islower.c/    0           0     0     644     347       `
#include <unistd.h>
/**
 * _islower - tests whether a character is a
 * lowercase letter from the English alphabet.
 * @c: character to test.
 * Return: 1 if it is a lowercase letter, 0 if it is not a lowercase letter.
 */
int _islower(int c)
{
int a_as_int = (int) c;
if (a_as_int <= 122 && a_as_int >= 97)
{
return (1);
}
else
{
return (0);
}
}

3-puts.c/       0           0     0     644     247       `
#include "main.h"
/**
 * _puts - a function that prints a string
 * @str: the character
 * Return: nothing
*/
void _puts(char *str)
{
int i = 0;
do {
if (*str != '\0')
{
_putchar(*(str + i));
}
i++;
} while (*(str + i) != '\0');
_putchar('\n');
}

3-strcmp.c/     0           0     0     644     364       `
/**
 * _strcmp - compares two strings, ending at the first byte that is different.
 * @s1: string to be compared
 * @s2: string to compare by
 * Return: the difference between the first character that are not the same
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' && s2[i] != '\0' && s1[i] == s2[i]; i++)
		;
	return (s1[i] - s2[i]);
}
3-strspn.c/     0           0     0     644     437       `
/**
 * _strspn - gets the length of a prefix substring
 * @s: segment to compare bytes from
 * @accept: string of bytes to compare with
 * Return: number of bytes in segment s which consist of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
int i = 0;
int j;
int k;
unsigned int l = 0;
while(*(s+i) != '\0')
{
i++;
}
for(j= 0; j < i/2; j++){
for(k= 0; k < i/2; k++){
if(*(accept+j) == *(s+k)){
l++;
}
}
}
return(l);
}
4-isalpha.c/    0           0     0     644     356       `
#include <unistd.h>
/**
 * _isalpha - tests whether its a character
 * characters from the English alphabet.
 * @c: character to test.
 * Return: 1 if it is a character , 0 if it is not .
 */
int _isalpha(int c)
{
int a_as_int = (int) c;
if ((a_as_int <= 122 && a_as_int >= 97) || (a_as_int <= 90 && a_as_int >= 65))
{
return (1);
}
else
{
return (0);
}
}
4-strpbrk.c/    0           0     0     644     545       `
/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: pointer to string to search through
 * @accept: array of bytes to search for
 * Return: pointer to the byte in s that matches one of the bytes in accept
 * or return NULL if no bytes are found.
 */
char *_strpbrk(char *s, char *accept)
{
int i = 0;
int j; 
int k;
int l = 0;
while (*(s + i) != '\0')
{
i++;
}
while (*(accept + l) != '\0')
{
l++;
}
for (j = 0; j < i; j++)
{
for (k = 0; k < l; k++)
{
if (*(s + j) == *(accept + k))
{
return (s+j);
break;
}
}
}
return ('\0');
}
5-strstr.c/     0           0     0     644     373       `
/**
 * _strstr - locates a substring
 * @haystack: string to look though
 * @needle: substring to find
 * Return: pointer to string with result of search
 */
char *_strstr(char *haystack, char *needle)
{
int i = 0;
int j;
while(*(haystack+i) != '\0')
{
i++;
}
for(j = 0; j < i; j++){
if(*(needle + 0) == *(haystack + j))
{
return (haystack + j);
break;
}
}
return ('\0');
}
6-abs.c/        0           0     0     644     235       `
/**
 * _abs - changes a number to the absolute value
 * numbers.
 * @n: int to test.
 * Return: the absolute number.
 */
int _abs(int n)
{
if (n > 0)
{
n = n * 1;
return (n);
}
else if (n < 0)
{
n = n * -1;
return (n);
}
return (0);
}

9-strcpy.c/     0           0     0     644     343       `
/**
 * *_strcpy - copies string pointed to by src to buffer pointed to by dest
 * @dest: the pointer to a string
 * @src: the pointer to a buffer
 * Return: the value of the pointer to dest.
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	i = 0;
	while (src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}

main.c/         0           0     0     644     147       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     170       `
#include <unistd.h>
/**
 * _putchar - returns a character
 * @c: the charater it returns
 * Return: nothing because it is void
*/
void _putchar(char c)
{
write(1,&c,1);
}